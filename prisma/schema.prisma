generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model User {
  instance_id                 String?           @db.Uuid
  id                          String            @id @default(uuid()) @db.Uuid
  profile                     Profile?
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
 
  @@index([instance_id])
  @@index([is_anonymous])
  @@map("users")
  @@schema("public")
}

model Profile {
  id                      String                  @id @default(uuid()) @db.Uuid
  userId                  String                  @unique @db.Uuid
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio                     String?
  avatarurl               String?
  questionnaire_responses QuestionnaireResponse[]

  @@map("profiles")
  @@schema("public")
}

model City {
  id      Int    @id @default(autoincrement())
  name    String
  region  String
  country String

  @@map("cities")
  @@schema("public")
}

model QuestionnaireResponse {
  id         Int       @id @default(autoincrement())
  profileId  String?   @db.Uuid
  anonymous  Boolean?  @default(false)
  answers    Json
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  profile    Profile?  @relation(fields: [profileId], references: [id], onUpdate: NoAction)

  @@map("questionnaire_responses")
  @@schema("public")
}
